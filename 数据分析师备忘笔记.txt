# 条形图显示中文：
plt.rcParams['font.sans-serif']=['SimHei']  # 黑体字体 ，显示中文
plt.rcParams['axes.unicode_minus']=False  # 显示‘-’符号
pd.set_option('display.max_columns',None)  # 显示所有列
pd.set_option('display.max_rows',None)  # 显示所有行
pd.set_option('max_colwidth',100)  # #设置value的显示长度为100，默认为50

重要笔记：
数据分析：pandas
# 由数组/list组成的字典 创建Dataframe，columns为key，index为默认数字标签

# 【课程2.5  Pandas数据结构Dataframe：基本概念及创建】 课程作业
#  作业1：用四种不同的方法，创建以下Dataframe（保证columns和index一致，值不做要求）

data1 = {'four':{'a':4,'b':5,'c':6,'d':7,'e':8},
         'one':{'a':1,'b':2,'c':3,'d':4,'e':5},
         'three':{'a':3,'b':4,'c':5,'d':6,'e':7},
         'two':{'a':2,'b':3,'c':4,'d':5,'e':6}
        }

df1 = pd.DataFrame(data1)
print('结果DataFrame为：第一种：\n',df1)
data2 = [{'four':4,'one':1,'three':3,'two':2},
         {'four':5,'one':2,'three':4,'two':3},
         {'four':6,'one':3,'three':5,'two':4},
         {'four':7,'one':4,'three':6,'two':5},
         {'four':8,'one':5,'three':7,'two':6},
        ]
df2 = pd.DataFrame(data2, index=list('abcde'))
print('结果DataFrame为：第二种：\n',df2)

data3 = {'four':np.arange(4,9),
         'one':np.arange(1,6),
         'three':np.arange(3,8),
         'two':np.arange(2,7),
        }
df3 = pd.DataFrame(data3,index=list('abcde'))
#print(data3)
print('结果DataFrame为：第三种：\n',df3)

data4 = {'four':[4,5,6,7,8],
         'one':[1,2,3,4,5],
         'three':[3,4,5,6,7],
         'two':[2,3,4,5,6]
        }
df4 = pd.DataFrame(data4,index=list('abcde'))
print('结果DataFrame为：第四种：\n',df4)

# 结果为：
#     four  one  three  two
# a     4    1      3    2
# b     5    2      4    3
# c     6    3      5    4
# d     7    4      6    5
# e     8    5      7    6

数据分析师备忘笔记：
import numpy as np
import pandas as pd

a = np.arange(5)  # 一维数组[0 1 2 3 4]
b = np.arange(5,10)  # 一维数组[5 6 7 8 9]
print(np.stack((a,b,),axis=1)) # axis=1 表示横向连接，axis=0 表示轴连接
	# numpy.stack(arrays, axis=0)：沿着新轴连接数组的序列，形状必须一样！
	# 重点解释axis参数的意思，假设两个数组[1 2 3]和[4 5 6]，shape均为(3,0)
	# axis=0：[[1 2 3] [4 5 6]]，reshape为(2,3) # 行连接
	# axis=1：[[1 4] [2 5] [3 6]]，reshape为(3,2) # 列连接
	axis = 0  # 表示行
	axis = 1  # 表示列


# 删除：.drop

s = pd.Series(np.random.rand(5), index=list('ngjur'))
# s = pd.Series(np.random.rand(5), index=list('jiang'))
print(s)
s1 = s.drop('n',inplace=True)  # 原数据删除，不复制新数据副本
s2 = s.drop(['j','g'])  # 原数据不删除，复制新数据做删除操作

# 删除：.drop
.drop(
    labels=None,
    axis=0,
    index=None,
    columns=None,
    level=None,
    inplace=False,
    errors='raise',
)

# 字符串转换方法 parser.parse
from dateutil.parser import parse  # 导入方法
time = '2000 5 1'
print(parse(time))

当前时间
print('1、请输出当前时间：',datetime.datetime.now(),'\n------')

时间间隔 
date_time = datetime.datetime(2000,5,1)  # 时间对象
timestamp = datetime.timedelta(100)  # 时间间隔对象
print(date_time + timestamp)  # 时间对象 + 100 后的时间


loc和iloc的用法和区别  网页地址：https://blog.csdn.net/weixin_44056331/article/details/89388866
loc——通过"行标签"索引行数据 
iloc——通过"行号"索引行数据 
ix——通过行标签或者行号索引行数据（基于loc和iloc 的混合） 

pd.pivot_table  # 数据透视表
pd.pivot_table(
    data,  # 数据表
    values=None, 		# 要聚合的列，筛选的那一列
    index=None,  		# 数据透视表的index，从原数据的列中筛选
    columns=None,		# 数据透视表的cloumns，从原数据的列中筛选
    aggfunc='mean',		# 默认是求平均值，[np.mean,np.sum] 均数和求和一起
    fill_value=None,	# 填充值
    margins=False,		# 页边距
    dropna=True,		# 默认是不包括那些条目都是NaN的列
    margins_name='All', # 包含总数的行/列的名称，当边距为真时
    observed=False,		# 这只适用于任何石斑鱼是分类。如果为真:仅显示分类石斑鱼的观察值。如果为False:显示分类石斑鱼的所有值。
)

古代说的“勾三股四弦五”中的“弦”，就是直角三角形中的斜边，“勾”、“股”是直角三角形的两条直角边。
正弦是股与弦的比例，余弦是余下的那条直角边与弦的比例。

33456677889 11位数拆分如下：
3 3			4		5 6		6	  7 7		8 		8 9
异常值	下四位数		  中间数		 上四位数	异常值

上四位数q1：(11+1)/4 == 3 （索引位置）
下四位数q3：(1+11)/4*3 == 9 （索引位置）
内限：9+1.5*(9-3) == 18	（最大值索引位置）
	  9-1.5*(9-3) == 0	（最小值索引位置）
外限：9+3*(9-3) == 27	（最大值索引位置）
	  9-3*(9-3) == -9	（最小值索引位置）  



上四位数q1：25%就是把数据从小到大排列，第25%个数  （n+1）/4
下四位数q3：75%就是把数据从小到大排列，第75%个数   (1+n) /4*3
内限：最大值q3 + 1.5IQR，最小值q1 -1.5IQR    (IQR=q3-q1)
外限：最大值q3 + 3IQR，最小值q1 -3IQR    (IQR=q3-q1)
异常值：内限之外 叫 中度异常，外限之外 叫 极度异常


DataFrame 数据可以当做字典对待
例如：
df = pd.DataFrame(np.random.rand(5,4),columns = list('ABCD'))
df.values  # 查看所有值
df.index  # 查看索引
for i in df.items():  # 遍历DataFrame的索引和键以及值
    print(i)  #  输出索引和键以及值
	

主要的GIS软件：ArcGIS、QGIS、MapGIS  现只学QGIS轻量级


WGS 84 /UTM ZONE 51N    这里N表示北半球
WGS 84 /UTM ZONE 51S    这里S表示南半球


加权叠加计算 -- 连接属性表工具
为了使各个指标的分值和计量单位统一，需要对原始数据进行标准化处理，标准化处理后的各项指标的数据为无量纲值
公式（1）：正指标：xi = (xi - xi,min)/(xi,max-xi,min)*100
式中：xi为指标标准化值；xi为指标的实际统计值；xi,min和xi,min分别为研究区内i指标的最大值和最小值

pd.read_csv(目录，engine='python')  # 读取数据
pd.to_csv(目录，行index= , 键header= )  # 保存数据
data.fillna(value = '')  # nan值批量填充

剔除重复值
data_c[['导演','上映年份','整理后剧名']].drop_duplicates()  # 去掉重复值

将值转换成离散的区间。
pd.cut(
    x,  # 要绑定的输入数组。必须是单维的。
    bins,  # 箱子
    right=True,  # 是否包含最右边的值
    labels=None,  # 数组或bool，可选
    retbins=False,  # 是否归还垃圾箱。
    precision=3,  # 精度
    include_lowest=False,  # 第一个区间是否应该包含左值。
    duplicates='raise',  # 去掉重复
)

pd.set_option('display.max_columns',None)  # 显示所有列
pd.set_option('display.max_rows',None)  # 显示所有行
pd.set_option('max_colwidth',100)  # #设置value的显示长度为100，默认为50

ax2 = fig3.add_subplot(2,1,2)  # 图准备放在第2行第一列，放在第二个图里

加权平均值与简单平均值的区别
简单平均数易受极端数据的影响，加权平均值就不会
加权平均值公式如下：
		M = （相应数值1 * 相应的权数1 + 相应数值n * 相应的权数n）/ 权数总和
权重公式：相应数值 / （数值总和）


alpha 一般代表是透明度

函数功能：绘制平行于x轴的水平参考线，在横轴上添加一条水平线。
调用签名：plt.axhline(y=0.0, c="r", ls="--", lw=2)
y：水平参考线的出发点
c：参考线的线条颜色
ls：参考线的线条风格
lw：参考线的线条宽度
平移性：上面的函数，同样适用于axvline()函数

data.plot(*args, **kwargs)
图的种类:str
- 'line': 线图(默认)
- 'bar':垂直条形图
- 'barh':水平条形图
- 'hist':直方图
- box: 箱线图
- 'kde':密度曲线图
-“density”:与“kde”相同  密度曲线
-“area”:面积图
-“pie”:饼图
-‘scatter’:散点图
-“hexbin”:做一个六角边的图

data = pd.DataFrame({'A_sale':np.random.rand(30) * 1000,
                    'B_sale':np.random.rand(30) * 1000},
                   index = pd.period_range('20170601','20170630'))
data['A_sale'].describe()  # 数据描述：数量，平均值，方差，最小值，最大值，前4分数，中位数，后4分数
df['豆瓣评分'].describe() # 描述统计：计数、平均数、标准差、最小值、前4分数、中位数、后4分数、最大值

'0' == 'O'  # 前是字符零，后是大写字母O
结果为False

子图
plt.subplots(行，列，图的尺寸)  # 这里不适合后期添加axvline（静态垂直线）
plt.figure(图的尺寸)
ax1=fig.add_subplot(1,2,1)  # ax1变量里是有一行两列，选择位置在第一行第一列中。
ax2=fig.add_subplot(1,2,2)  # ax1变量里是有一行两列，选择位置在第一行第两列中。

0 or 1
结果为：1
0 and 1
结果为：0
and 相当于 &&
or 相当于 ||
ord('¶')  # 查看字符对应的数值
chr(182)  # 查看数值对应的字符

怎样比较 seaborn 和 matplotlib？
Matplotlib是独立点菜,而Seaborn是点套餐

该函数主要用于滤除缺失数据。
如果是Series,则返回一个仅含非空数据和索引值的Series，默认丢弃含有缺失值的行。

xx.dropna()

对于DataFrame:

data.dropna(how = 'all')    # 传入这个参数后将只丢弃全为缺失值的那些行
data.dropna(axis = 1)       # 丢弃有缺失值的列（一般不会这么做，这样会删掉一个特征）
data.dropna(axis=1,how="all")   # 丢弃全为缺失值的那些列
data.dropna(axis=0,subset = ["Age", "Sex"])   # 丢弃‘Age’和‘Sex’这两列中有缺失值的行    


writer


lst = [y,x,data.ix[x,y]]  # 显示x行、y列、（x行y列对应的value值）

如何删除pandas中产生的Unnamed:0列
pd.read_csv(path, index_col=0)
或
pd.to_csv(path, index=False)


df['豆瓣评分'].plot.box(vert=False,)  # 箱型图横竖方向(vert)

3种魔法方法显示图形
%matplotlib inline  # 嵌入式图表如下：
%matplotlib notebook  # 弹出可交互的matplotlib窗口如下：
%matplotlib qt5  # 弹出matplotlib控制台如下：

from scipy import stats  # 从科学计算导入“统计”方法
stats.kstest  # 判断指数分布

pandas set_index和reset_index的用法
set_index方法，可以设置单索引和复合索引。 
reset_index可以还原索引，从新变为默认的整型索引 

set(value)  # 集合（set）是一个无序的不重复元素序列。