课堂笔记.sql
-- 数据的准备
	-- 创建一个数据库
	create database python04_test charset = utf8;
	
	-- 使用一个数据库
	use python_test;
	
	-- 选择显示使用的当前数据库是哪个?
	select database();
	
	-- 创建一个数据表
	-- 创建students表(id、name、age、height、gender、cls_id);
	create table students(
		id int unsigned not null auto_increment primary key,
		name varchar(30) default '',
		age tinyint unsigned default 0,
		height decimal(5,2),
		gender enum("男", "女", "中性", "保密") default "保密",
		cls_id int unsigned default 0,
		is_delete bit default 0
	);  -- 创建数据表
	
	insert into students values(0, '老王', 18, 188.88, '男', 0);  -- 插入数据
	select * from students;  -- 查看数据表内容
	
	-- 创建classes表(id、name)
	create table classes(
		id int unsigned not null auto_increment primary key,
		name varchar(30) not null
	);
	
	-- 向students表中插入数据
	insert into students values
	(0,"小明", 18, 180.00, 2, 1, 0),
	(0,"小月月", 18, 180.00, 2, 2, 1),
	(0,"彭于晏", 29, 185.00, 1, 1, 0),
	(0,"刘德华", 59, 175.00, 1, 2, 1),
	(0,"黄蓉", 38, 160.00, 2, 1, 0),
	(0,"凤姐", 28, 150.00, 4, 2, 1),
	(0,"王祖贤", 18, 172.00, 2, 1, 1),
	(0,"周杰伦", 36, NULL, 1, 1, 0),
	(0,"程坤", 25, 181.00, 1, 2, 0),
	(0,"刘亦菲", 25, 166.00, 2, 2, 0),
	(0,"金星", 33, 162.00, 3, 3, 1),
	(0,"静香", 12, 180.00, 2, 4, 0),
	(0,"郭靖", 12, 170.00, 1, 4, 0),
	(0,"周杰", 34, 176.00, 2, 5, 0);

	-- 向classes表中插入数据
	insert into classes values(0, "python_01期"), (0, "python_02期"), (0, "python_04期");

-- 查询
	-- 查询所有字段
	-- select * from 表名;
	select * from students;
	select * from classes;
	select id, name from students;
	
	-- 查询指定字段
	-- select 列1, 列2, ... from 表名;
	select name,age from students;
	
	-- 使用 as 给字段起别名
	-- select 字段 as 别名 ... from 表名;
	select name as 姓名,age as 年龄 from students;
	
	-- select 表名, 字段 ... from 表名;
	select students.name, students.age from students;
	
	-- 可以通过 as 给表起别名
	-- select 别名.字段 ... from 表名 as 别名;
	select students.name, students.age from students;
	select s.name, s.age from students as s;
	
	-- 消除重复行
	-- distinct 字段
	select distinct gender from students;

-- 条件查询
	-- 比较运算符
		-- select .... from 表名 where ....
		-- >
		-- 查询大于18岁的信息
		select * from students where age>18;  -- 显示所有列信息
		select id, name, age from students where age>18; --显示选择列的信息
		
		-- <
		-- 查询小于18岁的信息
		select * from students where age<18;
		
		-- >=
		-- <=
		-- 查询系哦啊与或者等于18岁的信息
		
		-- =
		-- 查询年龄为18岁的所有学生的名字
		select * from students where age=18;
		
		-- != 或者 <>
		
	-- 逻辑运算符
		-- and(并且)
		-- 18到28之间的所有学生信息
		select * from students where age>18 and age<28;
		
		-- 18岁以上到女性
		select * from students where age>18 and gender='女';
		select * from students where age>18 and gender=2;
		
		-- or(或)
		-- 18岁以上或者身高超过180(包含)以上
		select * from students where age>18 or height>=180;
		
		-- not 
		-- 不在 18岁以上到女性,这个范围内到信息
		select * from students where not (age>18 and gender=2);
		
		-- 年龄不是小于或者等于18 并且是女性
		-- select * from students where (not age<=18) and gender=2;
		
	-- 模糊查询
		-- like
		-- % 替换1个或者多个
		-- _替换1个
		-- 查询姓名中以 "小" 开始的名字
		select * from students where name like "小%";
		
		-- 查询有2个字的名字
		select * from students where name like "__";
		
		-- 查询有3个字的名字
		select * from students where name like "___";
		
		-- rlike 正则
		-- 查询以"周"开始的名字
		select * from students where name rlike "^周.*";
		
		-- 查询以"周"开始以"伦"结尾的姓名
		select * from students where name rlike "^周.*伦$";
	
	-- 范围查询
		-- in (1, 3, 8)表示在以个非连续的范围内
		-- 查询 年龄为18或34的姓名
		-- select name, age from students where age=18 or age=34;
		select name, age from students where age in (18,25,34);
		
		-- not in 不非连续的范围之内
		-- 年龄不是在18或34岁之间的信息
		
		-- between ... and ... 表示在一个连续的范围内
		-- 查询 年龄在18到34之间到信息
		select * from students where age between 18 and 34
		
		-- not between ... and ... 表示不再一个连续到范围内
		-- 查询 年龄不在在18到34之间到信息
		select * from students where age not between 18 and 34;  -- 和下一条显示一样;
		select * from students where not age between 18 and 34;
		-- 失败select * from students where age  not (between 18 and 34);
		
		
	-- 空判断
		-- 判空 is null
		-- 查询身高为空的信息
		select * from students where height is null;
		select * from students where height is Null;
		select * from students where height is NULL;
		
		-- 判非空 is not null
		select * from students where height is not null;
		

	-- 排序
		-- order by 字段
		-- asc 从小到大排序,即升序
		-- desc 从大到小排序,即降序
		

		-- 查询年龄在18到34之间到男性,按照年龄从小到大排序
		select * from students where (age between 18 and 34) and gender=1 order by age;  -- 省略了asc
		select * from students where (age between 18 and 34) and gender=1 order by age asc;  -- 同上一条的结果
		select * from students where (age between 18 and 34) and gender=1 order by age desc;  -- 年龄从小到大排序
		
		-- 查询年龄在18到34之间到女性,身高从高到矮排序
		select * from students where (age between 18 and 34) and gender=2 order by height desc;  -- 年龄从小到大排序
		
		-- order by 多个字段
		-- 查询年龄在18到34之间到女性,身高从高到矮排序,如果身高相同到情况下按照年龄从大到小排序
		select * from students where (age between 18 and 34) and gender=2 order by height age desc,;
		
		-- 查询年龄在18到34之间到女性,身高从高到矮排序,如果身高相同到情况下按照年龄从小到大排序
		--如果年龄也相同那么就按照id从大到小排序
		select * from students where (age between 18 and 34) and gender=2 order by height desc,age asc,id desc;
		
		-- 按照年龄从小到大、身高从高到矮的排序
		select * from students order by age asc,height desc;
		
		
		
	-- 聚合函数
		-- 总数
		-- count
		-- 查询男性有多少人，女性有多少人
		select * from students where gender=1;
		select count(*) from students where gender=1;
		select count(*) as 男性人数 from students where gender=1;
		select count(*) as 女性人数 from students where gender=2;
		
		-- 最大值
		-- max
		-- 查询最大年龄
		select max(age) from students;
		
		-- 查询女性的最高身高
		select max(height) from students where gender=2;
		
		
		-- 最小值
		-- min
		-- 查询最小年龄,女性;
		select min(age) from students where gender=2;
		
		-- 求和
		-- sum
		-- 计算所有人的年龄总和
		select sum(age) from students;
		
		
		-- 平均值
		-- avg
		-- 计算平均年龄
		select avg(age) from students;
		
		
		-- 计算平均年龄 sum(age)/count(*)
		select sum(age)/count(*) from students;
		
		-- 四舍五入 round(123.23, 1) 保留1位小数
		-- 计算所有人的平均年龄,保留两位小数
		select round(sum(age)/count(*),2) from students;
		
		-- 计算男性的平均身高 保留两位小数
		select round(avg(height),2) from students where gender=1;
		
		
	-- 分组
		-- group by
		-- 按照性别分组,查询所有的性别
		select gender from students group by gender;  -- 以性别来分组
		-- 失败select * from students group by gender;
		
		-- 计算每种性别中的人数
		select gender,count(*) from students group by gender;
		select gender,max(age) from students group by gender;
		
		-- 计算男性的人数
		select gender,count(*) from students where gender=1  group by gender;
		
		-- 显示男性有多少名字
		select gender,group_concat(name) from students where gender=1  group by gender;
		
		-- group_concat(...)
		-- 查询同种性别中的姓名
		select gender,group_concat(name) from students where gender=1  group by gender;
		select gender,group_concat(name,age,id) from students where gender=1  group by gender;
		select gender,group_concat(name,'_',age,'_',id) from students where gender=1  group by gender;
		
		-- having
		-- 查询平均年龄超过30岁的性别,以及姓名 having avg(age) > 30
		select gender, group_concat(name),avg(age) from students group by gender having avg(age) > 30;
		
		-- 查询每种性别中的人数多于2个的信息
		select gender, group_concat(name) from students group by gender having count(*)>2;
		
		
	-- 分页
		-- limit start, count
		-- 查询前5个数据
		select * from students limit 5;
		select * from students where gender=2 limit 5;  -- 显示女性5条信息
		select * from students limit 0,5;  -- 0表示从第一条数据开始,5是显示个数
		select * from students limit 5,5;  -- 第一个5表示从6条数据开始,5是显示个数
		select * from students limit 10,5;  -- 第一个5表示从11条数据开始,5是显示个数
		
		-- 查询id6-10(包含)的书序
		select * from students limit 5,5;  -- 第一个5表示从6条数据开始,5是显示个数
		
		-- 每页显示2个,第1个页面
		select * from students limit 0,2;
		
		-- 每页显示2个,第2个页面
		select * from students limit 2,2;
		
		-- 每页显示2个,第3个页面
		select * from students limit 4,2;
		
		-- 每页显示2个,第4个页面
		select * from students limit 6,2;
		
		-- 每页显示2个,显示第6页的信息,按照年龄从小到大排序
		-- 失败select * from students limit 2*(6-1),2;
		-- 失败select * from students limit 10,2 order by age asc;
		
	-- 连接查询
		-- inner join ... on
		
		-- select * from 表A inner join 表B;
		select * from students inner join classes;
		
		-- 查询 有能够对应班级到学生以及班级信息
		select * from students inner join classes on students.cls_id=classes.id;
				
		-- 按照要求显示姓名 班级
		select students.*, classes.name from students inner join classes on students.cls_id=classes.id;  -- 只去掉班级id
		select students.name, classes.name from students inner join classes on students.cls_id=classes.id;
		
		-- 给数据表起别名
		select s.name, c.name from students as s inner join classes as c on s.cls_id=c.id;
		
		-- 查询 有能够对应班级到学生以及班级信息,显示学生到所有信息,只显示班级名称
		select s.*, c.name from students as s inner join classes as c on s.cls_id=c.id;
		
		-- 在以上到查询中,将班级姓名显示在第一列
		select c.name, s.* from students as s inner join classes as c on s.cls_id=c.id;
		
		-- 查询 有能够对应班级到学生以及班级信息,按照班级进行排序
		-- select c.xxx s.xxx from student as s inner join classes as c on ... order by ...;
		select c.name, s.* from students as s inner join classes as c on s.cls_id=c.id order by c.name ;
		
		-- 当时同一个班级到时候,按照学生到id进行从小到大排序
		select c.name, s.* from students as s inner join classes as c on s.cls_id=c.id order by s.cls_id,s.id;
		
		-- left join
		-- 查询每位同学到班级信息
		select * from students as s left join classes as c on s.cls_id=c.id;
		
		-- 查询每页对应班级信息到学生
		-- select ... from xxx as s left join xxx as c on ... where ...
		-- select ... from xxx as s left join xxx as c on ... having ...
		select * from students as s left join classes as c on s.cls_id=c.id having c.id is null;
		select * from students as s left join classes as c on s.cls_id=c.id where c.id is null;
		
		-- right join on
		-- 将数据表名字互换位置,用left join完成
		
	-- 自关联
		-- 省级联动 url:http://demo.lanrenzhijia.com/2014/city0605/
		souce areas.sql  -- 导入areas.sql数据表
		
		-- 查询所有省份
		select * from areas where areas.id rlike "^[0-9]{2}$";
		
		-- 查询出山东省有哪些市
		select * from areas where areas.id rlike "^37[0-9]{2}$";
		
		-- 查询出青岛市有哪些县城
		select * from areas where areas.id rlike "^3702[0-9]{2}$";
		
		
	-- 子查询
		-- 标量子查询
		-- 查询出高于平均身高到信息
		
		-- 查询最高到男生信息
		select * from students where height = (select max(height) for student);
		
		-- 列级子查询
		-- 查询学生的班级号能够对应的学生信息
		-- select * from students where cls_id in(select id from classes);